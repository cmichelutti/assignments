Please solve this Haskell problem for me. It is about Ploy, a chess-like board game, more information is given below: 
Your task is to complete the 'listMoves' function. The function takes as arguments a game situation encoded as a string, consisting of the board and the next player ('b' for black and 'w' for white). You can assume that you will only receive valid strings that actually encode possible game situations. 
The board is described by a string structured as follows: Rows are separated by "/" and squares within rows are separated by ",". There are no "/" characters at the beginning and end of the string, and there are no "," characters at the beginning and end of each row. The squares are listed from a9 to i1. Within each square, a piece can be encoded as follows: The first character represents the colour, "b" for black and "w" for white. The following positions represent a decimal number between 1 and 255. Viewed as an unsigned 8-bit binary number, each bit corresponds to a direction in which the piece can move (represented as lines in the GUI). The least significant bit (LSB) represents upwards (or north, or along a column towards the row with the higher number), and the higher bits represent the other directions, clockwise from north. If there is no figure on the board, the space in the string remains empty. So the board at the start is described as follows: ,w84,w41,w56,w170,w56,w41,w84,/ , ,w24,w40,w17,w40,w48, , / , , , w16 , w16 , w16 , , , / , , , , , , , , / , , , , , , , , / , , , , , , , , / , , , b1 , b1 , b1 , , , / , , b3 , b130 , b17 , b130 , b129 , , / , b69 , b146 , b131 , b170 , b131 , b146 , b69 ,
Moves are described by a string in the format $<$start$>$-$<$destination$>$-$<$rotation$>$, where $<$rotation$>$ is the number of clockwise rotation steps. A rotation that causes a line to point southeast instead of north would be described by $<$rotation$>$=3. A counterclockwise step to the northwest is described by $<$rotation$>$=7. Rotations of more than seven steps are not allowed. Therefore, a move always consists of seven characters, based on the available options.
The game is played on a two-dimensional board of 9x9 squares - black starts. At the start of the game, each player has 15 pieces, with lines indicating the direction in which they can move. On each move, one piece can be moved and/or rotated, with each piece having different abilities. There are the following pieces:

- Shield: Has one line, so one way to move and can go <= 1 square and/or one turn (afterwards).
- Probe: Has two lines, so two ways to move, and can either move up to 2 squares or turn.
- Lance: Has three lines, so three ways to move, and can either move up to 3 squares or turn.
- Commander: Has 4 lines, so four ways to move, and can either move <= 1 square or turn.

Each move must be a movement and/or rotation that causes a change of state. A piece can be moved horizontally, vertically and diagonally along the directional lines shown on the piece. Pieces cannot be jumped over. The target square can either be empty or occupied by an opposing piece, in which case the opposing piece is removed from the board. The game ends when one of the two players either has no Commander left or only the Commander. The player who made the last move wins.
To describe the game situation and the moves, we use a modified FEN notation (well known from chess). This means that the columns are labelled with small letters from 'a' to 'i' and the rows with numbers from 1 to 9. To uniquely identify a square, the column is given first, followed by the row. For example, 'a1' represents the bottom left corner and 'i9' represents the top right corner. At the start of the game, the black pieces are placed in the 'lower' squares in rows 1-3, while the white pieces are placed in the 'upper' squares in rows 7-9.
Here is the Haskell template: 
\begin{verbatim}
--- module (DO NOT CHANGE!)
module PloyBot where

import Data.Char
import Util

--- external signatures (DO NOT CHANGE!)
getMove :: String -> String
listMoves :: String -> String

--- YOUR IMPLEMENTATION STARTS HERE --- 
\end{verbatim}

In conclusion, the initial prompt only involves the Haskell part of the task. We excluded any information that was irrelevant for ChatGPT to solve the task. The order of the prompt is also different from the original task. 